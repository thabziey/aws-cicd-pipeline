name: Deploy to AWS ECS

on:
  push:
    branches: [main]
    paths:
      - '**'  # Run when anything in the repo changes
  pull_request:
    branches: [main]
    paths:
      - '**'
  workflow_dispatch:  # Manual triggering

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./  # Set working directory for all steps
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './package-lock.json'  # Specify path for cache
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Test Docker build
      run: |
        docker build -t test-build .
        echo "Docker build successful!"

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'  # Only deploy from main branch
    
    defaults:
      run:
        working-directory: ./
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image from working directory
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ./task-definition.json  # Specify full path
        container-name: webapp  # Make sure this matches your container name in task definition
        image: ${{ steps.build-image.outputs.image }}
    
    - name: Debug ECS environment values
      run: |
        echo "üîç ECS_CLUSTER: $ECS_CLUSTER"
        echo "üîç ECS_SERVICE: $ECS_SERVICE"
        echo "üîç ECS_TASK_DEFINITION: $ECS_TASK_DEFINITION"

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
    
    - name: Get Application URL
      run: |
        echo "Waiting for service to stabilize..."
        sleep 30
        
        # Get the public IP of the running task
        TASK_ARN=$(aws ecs list-tasks \
          --cluster $ECS_CLUSTER \
          --service-name $ECS_SERVICE \
          --query 'taskArns[0]' \
          --output text)
        
        if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
          # Get network interface ID
          NETWORK_INTERFACE_ID=$(aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
          
          # Get public IP
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $NETWORK_INTERFACE_ID \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
          
          echo ""
          echo "üöÄ Deployment successful!"
          echo "üì± Your app is live at: http://$PUBLIC_IP:3001"
          echo "üè• Health check: http://$PUBLIC_IP:3001/health"
          echo "üìä API endpoint: http://$PUBLIC_IP:3001/api/info"
          echo ""
          echo "üìã AWS Console Links:"
          echo "ECS Service: https://console.aws.amazon.com/ecs/home?region=$AWS_REGION#/clusters/$ECS_CLUSTER/services/$ECS_SERVICE"
          echo "CloudWatch Logs: https://console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/%2Fecs%2F$ECS_TASK_DEFINITION"
          echo ""
        else
          echo "‚ùå Could not get task information. Check ECS console for details."
        fi